import { z, ZodError } from "zod";

// üìò Schema de cria√ß√£o
export const createTutorSchema = z.object({
  nome: z.string()
        .nonempty("O nome √© obrigat√≥rio")
        .min(3, "O nome deve ter pelo menos 3 caracteres"),
  email: z.string().email("Email inv√°lido"),
  telefone: z.string().optional(),
  endereco: z.string().optional(),
});

// üìò Schema de atualiza√ß√£o
export const updateTutorSchema = createTutorSchema.partial();

// üìò Schema de exclus√£o
export const deleteTutorSchema = z.object({
  tutorId: z.number({ message: "ID do tutor deve ser um n√∫mero" })
             .int("ID do tutor deve ser inteiro")
             .positive("ID do tutor deve ser maior que zero"),
  gerenteId: z.number({ message: "ID do gerente deve ser um n√∫mero" })
             .int("ID do gerente deve ser inteiro")
             .positive("ID do gerente deve ser maior que zero"),
});

// üìò Fun√ß√£o para formatar erros do Zod de forma bonita
export function formatZodError(error: unknown) {
    if (error instanceof ZodError) {
        return error.issues.map(err => ({
            campo: err.path.join("."),
            mensagem: err.message,
        }));
    }
    return [{ campo: "desconhecido", mensagem: "Erro de valida√ß√£o" }];
}
