import { z, ZodError } from "zod";

// üìò Schema de cria√ß√£o
export const createPetSchema = z.object({
    nome: z.string().nonempty("O nome do pet √© obrigat√≥rio"),
    especie: z.string().nonempty("A esp√©cie √© obrigat√≥ria"),
    raca: z.string().nonempty("A ra√ßa √© obrigat√≥ria"),
    dataNascimento: z
        .string()
        .refine(
            (val) => !isNaN(Date.parse(val)),
            "Data de nascimento inv√°lida"
        ),
    tutorId: z.number().int("ID do tutor inv√°lido"),
    agendamentoIds: z.array(z.number().int()).optional(), // IDs opcionais de agendamentos
    consultaIds: z.array(z.number().int()).optional(), // IDs opcionais de consultas
});

// üìò Schema de atualiza√ß√£o (parcial)
export const updatePetSchema = createPetSchema.partial();

// üìò Schema de exclus√£o (exemplo: apenas o tutor ou gerente pode deletar)
export const deletePetSchema = z.object({
    petId: z.number().int("ID do pet inv√°lido"),
    solicitanteId: z.number().int("ID do solicitante inv√°lido"),
});

// üìò Fun√ß√£o para formatar erros do Zod de forma bonita
export function formatZodError(error: unknown) {
    if (error instanceof ZodError) {
        return error.issues.map(err => ({
            campo: err.path.join("."),
            mensagem: err.message,
        }));
    }
    return [{ campo: "desconhecido", mensagem: "Erro de valida√ß√£o" }];
}
