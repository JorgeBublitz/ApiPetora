// Arquivo: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Gerente do sistema (para login, etc.)
model Gerente {
  id           Int            @id @default(autoincrement())
  nome         String
  email        String         @unique
  senha        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  gerenteId Int
  gerente   Gerente  @relation(fields: [gerenteId], references: [id], onDelete: Cascade)
  criadoEm  DateTime @default(now())
}

// Dono do animal
model Tutor {
  id       Int     @id @default(autoincrement())
  nome     String
  email    String  @unique
  telefone String?
  endereco String?

  pets Pet[] // Um tutor pode ter vários pets

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Animal de estimação
model Pet {
  id             Int      @id @default(autoincrement())
  nome           String
  especie        String
  raca           String
  dataNascimento DateTime

  tutorId Int // Relação obrigatória com Tutor
  tutor   Tutor @relation(fields: [tutorId], references: [id])

  agendamentos Agendamento[] // Um pet pode ter vários agendamentos de serviços
  consultas    Consulta[] // Um pet pode ter várias consultas veterinárias

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Agendamento de serviços gerais (banho, tosa)
model Agendamento {
  id         Int      @id @default(autoincrement())
  data       DateTime
  servico    String // Ex: "Banho", "Tosa"
  observacao String?

  petId Int // Relação obrigatória com Pet
  pet   Pet @relation(fields: [petId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Registro de consulta veterinária
model Consulta {
  id   Int      @id @default(autoincrement())
  data DateTime

  veterinarioId Int
  veterinario   Veterinario @relation(fields: [veterinarioId], references: [id])
  descricao     String
  tratamento    String?

  petId Int // Relação obrigatória com Pet
  pet   Pet @relation(fields: [petId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Veterinario {
  id            Int        @id @default(autoincrement())
  nome          String
  email         String     @unique
  senha         String
  especialidade String
  consulta      Consulta[]
}
